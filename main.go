package main

import (
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/erexo/gobiaitem/in"
	"github.com/erexo/gobiaitem/out"
)

const (
	itemsPath = `X:\servers\ntsw\data\items`
	otbFile   = "items.otb"
	xmlFile   = "items.xml"
	fileName  = "_items.go"
)

func main() {
	fmt.Println("HI")

	data, err := ioutil.ReadFile(filepath.Join(itemsPath, otbFile))
	if err != nil {
		panic(err)
	}
	serverClient := ReadOtb(data)
	fmt.Println(len(serverClient))

	items, err := readxml()
	if err != nil {
		panic(err)
	}
	fmt.Println(len(items))

	ret := make([]*out.Item, 0, len(items))
	for _, item := range items {
		if client, ok := serverClient[uint16(item.Id)]; ok {
			ret = append(ret, out.NewItem(client, item))
		}
	}

	f, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	idChars := 1
	if len(ret) > 0 {
		idChars += len(strconv.Itoa(int(ret[len(ret)-1].ServerId)))
	}

	itemsToInclude := make(map[uint16]struct{})

	// categories
	var categoriesStr strings.Builder
	for cat := out.ItemCategoryFirst; cat <= out.ItemCategoryLast; cat++ {
		categoriesStr.WriteString(fmt.Sprintf("\tItemCategory(%d): {", cat))
		if it, ok := out.Items[cat]; ok {
			if len(it) > 0 {
				categoriesStr.WriteByte('\n')
			}
			for _, id := range it {
				itemsToInclude[id] = struct{}{}

				categoriesStr.WriteString("\t\titem")
				categoriesStr.WriteString(strconv.Itoa(int(id)))
				categoriesStr.WriteString(",\n")
			}
			if len(it) > 0 {
				categoriesStr.WriteByte('\t')
			}
		}
		categoriesStr.WriteString("},\n")
	}

	var varStr strings.Builder
	var mapStr strings.Builder
	for _, item := range ret {
		if _, ok := itemsToInclude[item.ServerId]; !ok {
			continue
		}

		// var
		varName := fmt.Sprintf("item%d", item.ServerId)
		varStr.WriteByte('\t')
		varStr.WriteString(varName)
		nameDiff := idChars - len(strconv.Itoa(int(item.ServerId)))
		for i := 0; i < nameDiff; i++ {
			varStr.WriteByte(' ')
		}
		varStr.WriteString("= &")
		varStr.WriteString(item.String())
		varStr.WriteByte('\n')

		// map
		mapStr.WriteString(fmt.Sprintf("\t%d:", item.ServerId))
		for i := 0; i < nameDiff; i++ {
			mapStr.WriteByte(' ')
		}
		mapStr.WriteString(varName)
		mapStr.WriteString(",\n")
	}

	if _, err := fmt.Fprintf(f, `// Code generated by "gobiaitem" using 'go generate'. DO NOT EDIT.

package assets

%s

%s

var (
%s)

var ItemsCategory = map[ItemCategory][]*Item{
%s}

var ItemsServerId = map[uint16]*Item{
%s}
`, out.Category(), out.Type(), varStr.String(), categoriesStr.String(), mapStr.String()); err != nil {
		panic(err)
	}

	fmt.Println("BYE")
}

func readxml() ([]*in.Item, error) {
	f, err := os.Open(filepath.Join(itemsPath, xmlFile))
	if err != nil {
		return nil, err
	}
	defer f.Close()

	items := &in.Items{}
	if err := xml.NewDecoder(f).Decode(items); err != nil {
		return nil, err
	}

	return items.Items, nil
}
